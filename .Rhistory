fit=glm1(use~wind,family="binomial",data=shuttletemp)
install.packages("glm2")
fit=glm2(use~wind,family="binomial",data=shuttletemp)
library(glm2)
fit=glm2(use~wind,family="binomial",data=shuttletemp)
fit=glm2(use~factor(wind)-1,family="binomial",data=shuttletemp)
shuttle2<-shuttle
shuttle2$use2<-as.numeric(shuttle2$use=='auto')
fit<-glm(use2 ~ factor(wind) - 1, family = binomial, data = shuttle2)
summary(fit)$coef
head(shuttle2)
shuttle2<-shuttle
fit<-glm(use2 ~ factor(wind) - 1, family = binomial, data = shuttle2)
fit<-glm(use ~ factor(wind) - 1, family = binomial, data = shuttle2)
ead(shuttle2)
head(shuttle2)
shuttle2<-shuttle
fit<-glm(use ~ factor(wind) - 1, family = binomial, data = shuttle2)
head(shuttle2)
fit=glm(use~wind,family="binomial",data=shuttle)
summary(fit)
fit=glm(use~factor(wind)-1,family="binomial",data=shuttle)
summary(fit)
coef(fit)
exp(coef(fit))
source('E:/Anoop/Books/Data Science/CourseTutorials/Regression Models/Regression.R')
head(packages.df$'package Name',50)
head(packages.df$`Package Name`,50)
library(plyr)
library(XML)
install.packages("XML")
library(XML)
head(packages.df$`Package Name`,50)
head(packages.df$`Package Name`, 50)
plot(main="Top packages by page rank", cex=0.5)
library(miniCRAN)
install.packages("miniCRAN")
install.packages("igraph")
install.packages("magrittr")
install.packages("magrittr")
library(miniCRAN)
library(igraph)
library(magrittr)
MRAN <- "http://mran.revolutionanalytics.com/snapshot/2014-11-01/"
MRAN
library("knitr", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
source('E:/Anoop/Books/Data Science/RPackages/ggplot2/GGPlot2Practise.R')
head(diamonds)
library(diamonds)
library(ggplot2)
data(diamonds)
head(diamonds)
unique(diamonds$clarity)
dmod <- lm(price ~ cut, data = diamonds)
cuts <- data.frame(cut = unique(diamonds$cut), predict(dmod, data.frame(cut = unique(diamonds$cut)), se = TRUE)[c("fit", "se.fit")])
cuts
predict(dmod, data.frame(cut = unique(diamonds$cut))
)
head(diamonds)
predict(dmod, data.frame(cut = unique(diamonds$cut))
)
cbind(unique(diamonds$cut),predict(dmod, data.frame(cut = unique(diamonds$cut)))
)
head(diamonds)
cbind(unique(diamonds$cut),predict(dmod, data.frame(cut = unique(diamonds$cut)))
head(diamonds))
unique(diamonds$cut)
A=cbind(unique(diamonds$cut),predict(dmod, data.frame(cut = unique(diamonds$cut)))
)
A
cuts <- data.frame(cut = unique(diamonds$cut), predict(dmod, data.frame(cut = unique(diamonds$cut)), se = TRUE)[c("fit", "se.fit")]))
cuts <- data.frame(cut = unique(diamonds$cut), predict(dmod, data.frame(cut = unique(diamonds$cut)), se = TRUE)[c("fit", "se.fit")])
data.frame(cut = unique(diamonds$cut), predict(dmod, data.frame(cut = unique(diamonds$cut)), se = TRUE)[c("fit", "se.fit")])
unique(diamonds$cut)
data.frame(unique(diamonds$cut))
unique(diamonds$cut)
A=unique(diamonds$cut)
A[1]
A=cbind(unique(diamonds$cut),predict(dmod, data.frame(cut = unique(diamonds$cut))))
A
cuts
A=data.frame(unique(diamonds$cut),predict(dmod, data.frame(cut = unique(diamonds$cut))))
A
se <- ggplot(cuts, aes(x = cut, y = fit, ymin = fit - se.fit, ymax = fit + se.fit, colour = cut))
se
se + geom_pointrange()
se <- ggplot(cuts, aes(x = cut, y = fit , colour = cut))
se + geom_pointrange()
se + geom_point()
se <- ggplot(cuts, aes(x = cut, y = fit, ymin = fit - se.fit, ymax = fit + se.fit, colour = cut))
se + geom_pointrange()
p <- ggplot(mtcars, aes(wt, mpg))
p+geom_point()
p+geom_line()
p+geom_point()
p+Geom_smooth()
p+geom_smooth()
p + annotate("rect", xmin = 2, xmax = 3.5, ymin = 2, ymax = 25, fill = "dark grey", alpha = .5)
p <- ggplot(mtcars, aes(wt, mpg))
p+geom_point()
p+geom_smooth()
p + annotate("rect", xmin = 2, xmax = 3.5, ymin = 2, ymax = 25, fill = "dark grey", alpha = .5)
p + geom_segment(aes(x = 2, y = 15, xend = 2, yend = 25), arrow = arrow(length = unit(0.5, "cm")))
p + geom_segment(aes(x = 2, y = 15, xend = 2, yend = 25), arrow = arrows(length = unit(0.5, "cm")))
p + geom_segment(aes(x = 2, y = 15, xend = 2, yend = 25))
p + geom_segment(aes(x = 2, y = 15, xend = 3, yend = 15), arrow = arrow(length = unit(0.5, "cm"))
)
p + geom_segment(aes(x = 2, y = 15, xend = 3, yend = 15), arrow = arrows(length = unit(0.5, "cm"))
)
p + geom_segment(aes(x = 2, y = 15, xend = 3, yend = 15), arrow = arrows(x = 2, y = 15,length = unit(0.5, "cm"))
)
p + geom_segment(aes(x = 2, y = 15, xend = 3, yend = 15), arrow = arrow(length = unit(0.5, "cm")))
p + geom_segment(aes(x = 2, y = 15, xend = 3, yend = 15), arrows = arrows(length = unit(0.5, "cm")))
p + geom_segment(aes(x = 2, y = 15, xend = 3, yend = 15), arrow = arrow(length = unit(0.5, "cm")))
library(grid)
p + geom_segment(aes(x = 2, y = 15, xend = 3, yend = 15), arrow = arrow(length = unit(0.5, "cm")))
p + geom_segment(aes(x = 5, y = 30, xend = 3.5, yend = 25), arrow = arrow(length = unit(0.5, "cm")))
table(x = rpois(100, 5))
counts <- as.data.frame(table(x = rpois(100, 5)))
counts
table(x = rpois(100, 5))
x = rpois(100, 5)
x
mean(x)
table(x = rpois(100, 5))
table(x = rpois(100, 5))
counts$x <- as.numeric(as.character(counts$x))
counts$x
library("gridBase", lib.loc="~/R/win-library/3.2")
with(counts, plot(x, Freq, type = "h", lwd = 10))
ggplot(counts, aes(x, Freq)) + geom_segment(aes(yend = 0, xend = x), size = 10)
annotate(geom, x = NULL, y = NULL, xmin = NULL, xmax = NULL, ymin = NULL, ymax = NULL, xend = NULL, yend = NULL, ..., na.rm = FALSE)
p=ggplot(counts, aes(x, Freq)) + geom_segment(aes(yend = 0, xend = x), size = 10)
p+annotate(geom, x = NULL, y = NULL, xmin = NULL, xmax = NULL, ymin = NULL, ymax = NULL, xend = NULL, yend = NULL, ..., na.rm = FALSE)
p+annotate(geom, x = NULL, y = NULL, xmin = NULL, xmax = NULL, ymin = NULL, ymax = NULL, xend = NULL, yend = NULL, na.rm = FALSE)
p <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()
p
p + annotate("text", x = 4, y = 25, label = "Some text")
p + annotate("text", x = 2:5, y = 25, label = "Some text")
p + annotate("text", x = 2,xend=5, y = 25, label = "Some text")
p + annotate("text", xmin = 2,xend=5, y = 25, label = "Some text")
p + annotate("text",x ,xmin = 2,xend=5, y = 25, label = "Some text")
p + annotate("text",x=2,xend=5, y = 25, label = "Some text")
p + annotate("text",x=2,xend=5, y = 25, label = "Some text")
p + annotate("pointrange", x = 3.5, y = 20, ymin = 12, ymax = 28, colour = "red", size = 1.5)
p + annotate("text", x = 2:3, y = 20:21, label = c("my label", "label 2"))
df <- data.frame(x = 1:10, y = 1:10)
df
base <- ggplot(df, aes(x, y)) + geom_blank() + theme_bw()
base
base <- ggplot(df, aes(x, y)) + geom_blank()
base
base <- ggplot(df, aes(x, y)) + geom_blank() + theme_bw()
base
base <- ggplot(df, aes(x, y)) + geom_blank() + theme_gray()
base
base + annotation_custom(grob = tableGrob(head(iris[ ,1:3])), xmin = 3, xmax = 6, ymin = 2, ymax = 8)
library(gridExtra)
library(grid)
base + annotation_custom(grob = tableGrob(head(iris[ ,1:3])), xmin = 3, xmax = 6, ymin = 2, ymax = 8)
base + annotation_custom(grob = roundrectGrob(), xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
df <- data.frame(x = 1:10, y = 1:10) base <- ggplot(df, aes(x, y)) + geom_blank() + theme_bw() # Adding a table ## Not run: if (require(gridExtra)) { base + annotation_custom(grob = tableGrob(head(iris[ ,1:3])), xmin = 3, xmax = 6, ymin = 2, ymax = 8) # full panel base + annotation_custom(grob = roundrectGrob(), xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) }
df2 <- data.frame(x = 1 , y = 1
)
g <- ggplotGrob(ggplot(df2, aes(x, y))
g
g <- ggplotGrob(ggplot(df2, aes(x, y)))
df2 <- data.frame(x = 1 , y = 1) g <- ggplotGrob(ggplot(df2, aes(x, y)) + geom_point()
g <- ggplotGrob(ggplot(df2, aes(x, y))) + geom_point()
g+theme(plot.background = element_rect(colour = "black")))
g <- ggplotGrob(ggplot(df2, aes(x, y)) + geom_point() + theme(plot.background = element_rect(colour = "black")))
base + annotation_custom(grob = g, xmin = 1, xmax = 10, ymin = 8, ymax = 10)
g=ggplot(df2, aes(x, y)) + geom_point()
g
g=ggplot(df2, aes(x, y)) + geom_point()+theme(plot.background = element_rect(colour = "black"))
g=ggplot(df2, aes(x, y)) + geom_point()
g=ggplot(df2, aes(x, y)) + geom_point()+theme(plot.background = element_rect(colour = "black"))
base + annotation_custom(grob = g, xmin = 1, xmax = 10, ymin = 8, ymax = 10)
a <- ggplot(msleep, aes(bodywt, brainwt)
)
a
a+geom_point(na.rm = TRUE)
a=a+geom_point(na.rm = TRUE)
a+scale_x_log10( breaks = scales::trans_breaks("log10", function(x) 10^x), labels = scales::trans_format("log10", scales::math_format(10^.x)) )
a+scale_y_log10( breaks = scales::trans_breaks("log10", function(x) 10^x), labels = scales::trans_format("log10", scales::math_format(10^.x)) )
a+ theme_bw()
a + annotation_logticks(
)
t <- ggplot(msleep, aes(bodywt, brainwt))
t
t+geom_point()
t=t+geom_point()
t
t+coord_trans(x = "log10", y = "log10")
t+theme_bw()
t + annotation_logticks(scaled = FALSE)
map_data("state")
install.packages("maps")
library(maps)
map_data("state")
head(map_data("state"),10)
data(seals)
head(seals)
seal.sub <- subset(seals, long > -130 & lat < 45 & lat > 40)
head(seal.sub)
ggplot(seal.sub, aes(x = long, y = lat))
a=ggplot(seal.sub, aes(x = long, y = lat))
a+annotation_map(usamap, fill = "NA", colour = "grey50")
a+annotation_map(usemap, fill = "NA", colour = "grey50")
a+annotation_map(usa{map}, fill = "NA", colour = "grey50")
a+annotation_map(usa(map), fill = "NA", colour = "grey50")
ggplot(seal.sub, aes(x = long, y = lat)) + annotation_map(usamap, fill = "NA", colour = "grey50") + geom_segment(aes(xend = long + delta_long, yend = lat + delta_lat))
usamap <- map_data("state")
ggplot(seal.sub, aes(x = long, y = lat))
a=ggplot(seal.sub, aes(x = long, y = lat))
a
a+annotation_map(usamap, fill = "NA", colour = "grey50")
seal.sub <- subset(seals, long > -130 & lat < 45 & lat > 40)
ggplot(seal.sub, aes(x = long, y = lat)) +
annotation_map(usamap, fill = "NA", colour = "grey50") +
geom_segment(aes(xend = long + delta_long, yend = lat + delta_lat))
seal2 <- transform(seal.sub, latr = cut(lat, 2), longr = cut(long, 2))
seal2
Z <- stats::rnorm(10000)
Z
table(cut(Z, breaks = -6:6))
table(Z)
seal2 <- transform(seal.sub, latr = cut(lat, 2), longr = cut(long, 2))
seal2
ggplot(seal2, aes(x = long, y = lat)) + annotation_map(usamap, fill = "NA", colour = "grey50") + geom_segment(aes(xend = long + delta_long, yend = lat + delta_lat)) + facet_grid(latr ~ longr, scales = "free", space = "free")
seq(0, 360, length.out = 50 * 50)
hcl(seq(0, 360, length.out = 50 * 50), 80, 70)
matrix(hcl(seq(0, 360, length.out = 50 * 50), 80, 70), nrow = 50)
rainbow <- matrix(hcl(seq(0, 360, length.out = 50 * 50), 80, 70), nrow = 50)
a=ggplot(mtcars, aes(mpg, wt)) + geom_point()
a
a+annotation_raster(rainbow, 15, 20, 3, 4)
ggplot(mtcars, aes(mpg, wt)) + annotation_raster(rainbow, -Inf, Inf, -Inf, Inf) + geom_point()
rainbow2 <- matrix(hcl(seq(0, 360, length.out = 10), 80, 70), nrow = 1) ggplot(mtcars, aes(mpg, wt)) + annotation_raster(rainbow2, -Inf, Inf, -Inf, Inf) + geom_point()
rainbow2 <- matrix(hcl(seq(0, 360, length.out = 10), 80, 70), nrow = 1)
ggplot(mtcars, aes(mpg, wt)) + annotation_raster(rainbow2, -Inf, Inf, -Inf, Inf)
ggplot(mtcars, aes(mpg, wt)) + annotation_raster(rainbow2, -Inf, Inf, -Inf, Inf) + geom_point()
ggplot(mtcars, aes(mpg, wt)) + annotation_raster(rainbow2, -Inf, Inf, -Inf, Inf, interpolate = TRUE) + geom_point()
p <- ggplot(mtcars, aes(disp, drat)) + geom_point()
p + facet_wrap(~am)
to_string <- as_labeller(c(`0` = "Zero", `1` = "One"))
to_string <- as_labeller(c('0' = "Zero", '1' = "One"))
to_string <- as_labeller(c('0' = "Zero", '1' = "One"))
to_string <-labeller(c('0' = "Zero", '1' = "One"))
p + facet_wrap(~am, labeller = to_string)
p + facet_grid(~am, labeller = to_string)
p <- ggplot(mtcars, aes(disp, drat)) + geom_point()
p + facet_grid(~am)
p + facet_grid(~am,labeller=labeller(am=to_string))
to_string
p + facet_grid(~am,labeller=labeller(am=to_string))
p + facet_grid(cyl ~ am, labeller = labeller(am = to_string))
to_string <- as_labeller(c(`0` = "Zero", `1` = "One")
)
to_string <- labeller(c(`0` = "Zero", `1` = "One"))
p + facet_grid(cyl ~ am, labeller = labeller(am = to_string))
p <- ggplot(mtcars, aes(disp, drat)) + geom_point()
autoplot(p)
ia <- map_data("county", "iowa")
ia
mid_range <- function(x) mean(range(x))
seats <- plyr::ddply(ia, "subregion", plyr::colwise(mid_range, c("lat", "long")))
library("plyr", lib.loc="~/R/win-library/3.2")
seats <- plyr::ddply(ia, "subregion", plyr::colwise(mid_range, c("lat", "long")))
seats
ggplot(ia, aes(long, lat))
a=ggplot(ia, aes(long, lat))
a+geom_polygon(aes(group = group), fill = NA, colour = "grey60"
)
geom_text(aes(label = subregion), data = seats, size = 2, angle = 45)
data(us.cities)
capitals <- subset(us.cities, capital == 2)
ggplot(capitals, aes(long, lat)) + borders("state") + geom_point(aes(size = pop)) + scale_size_area() + coord_quickmap()
ggplot(capitals, aes(long, lat)) +geom_point(aes(size = pop))
ggplot(capitals, aes(long, lat)) +geom_point(aes(size = pop))+coord_quickmap()
ggplot(capitals, aes(long, lat)) +geom_point(aes(size = pop))+coord_quickmap()+borders("state")
ggplot(capitals, aes(long, lat)) +geom_point(aes(size = pop))+coord_quickmap()+borders("state")+scale_size_area()
ggplot(capitals, aes(long, lat)) + borders("world", xlim = c(-130, -60), ylim = c(20, 50)) + geom_point(aes(size = pop)) + scale_size_area() + coord_quickmap()
head(us.cities)
t <- theme_grey()
t
calc_element('text', t)
p <- ggplot(mtcars, aes(disp, wt)) + geom_point() + geom_smooth()
p
p + scale_x_continuous(limits = c(325, 500))
p + coord_cartesian(xlim = c(325, 500))
p + coord_cartesian(expand = FALSE)
p + coord_cartesian(xlim = c(325, 500),expand=FALSE)
d <- ggplot(diamonds, aes(carat, price))
d
d+stat_bin2d(bins = 25, colour = "white")
d+stat_bin2d(bins = 25, geom=geom_point())
d+geom_point()
d+stat_bin2d(bins = 25, geom=geom_point())
d+stat_bin2d(bins = 25, colour = "white")
d + scale_x_continuous(limits = c(0, 1))
d + coord_cartesian(xlim = c(0, 1)
)
d <- ggplot(diamonds, aes(carat, price))
d + coord_cartesian(xlim = c(0, 1)
)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
p
p + coord_fixed(ratio = 1)
p + coord_fixed(ratio = 5)
p + coord_fixed(ratio = 1/5)
p + coord_fixed(ratio = 1)
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
ggplot(diamonds, aes(cut, price)) + geom_boxplot() + coord_flip()
ggplot(diamonds, aes(cut, price)) + geom_boxplot()
ggplot(diamonds, aes(cut, price)) + geom_boxplot() + coord_flip()
df <- data.frame(x = 1:5, y = (1:5) ^ 2)
df
ggplot(df, aes(x, y))
ggplot(df, aes(x, y)) + geom_area()
last_plot() + coord_flip(
)
map_data("In")
map_data("NZ")
require("maps")
map_data("NZ")
map_data("nz")
map_data("in")
map_data("country")
map_data("nz")
nz <- map_data("nz")
nzmap <- ggplot(nz, aes(x = long, y = lat, group = group))
nzmap
nzmap+geom_polygon(fill = "white", colour = "black")
nzmap + coord_map()
install.packages(mapproj)
install.packages("mapproj")
library(mapproj)
nzmap + coord_map()
nzmap + coord_map()
nzmap + coord_quickmap()
nzmap
nzmap <- ggplot(nz, aes(x = long, y = lat, group = group))
nzmap=nzmap+geom_polygon(fill = "white", colour = "black")
nzmap + coord_quickmap()
nzmap + coord_map()
nzmap + coord_quickmap()
nzmap + coord_quickmap()
nzmap + coord_map()
df <- data.frame( variable = c("does not resemble", "resembles"), value = c(20, 80) )
ggplot(df, aes(x = "", y = value, fill = variable)) + geom_bar(width = 1, stat = "identity") + scale_fill_manual(values = c("red", "yellow")) + coord_polar("y", start = pi / 3) + labs(title = "Pac man")
ggplot(df, aes(x = "", y = value, fill = variable)) + geom_bar(width = 1, stat = "identity")
ggplot(df, aes(x = "", y = value, fill = variable)) + geom_bar(width = 1, stat = "identity")+scale_fill_manual(values = c("red", "yellow"))
ggplot(df, aes(x = "", y = value, fill = variable)) + geom_bar(width = 1, stat = "identity")+scale_fill_manual(values = c("red", "yellow"))+coord_polar("y", start = pi / 3)
require("ggplot2movies")
install.packages("ggplot2movies")
require("ggplot2movies")
(movies$rating
)
table(cut_interval(1:100, n = 10))
movies$rrating <- cut_interval(movies$rating, length = 1)
movies$budgetq <- cut_number(movies$budget, 4)
doh <- ggplot(movies, aes(x = rrating, fill = budgetq))
doh
doh + geom_bar(width = 1) + coord_polar()
doh + geom_bar(width = 1)
head(movies$budget,10)
head(movies$budget[na.rm=TRUE],10)
head(movies[na.rm=TRUE,c("budget")],10)
head(movies$budget,100)
max(movies$budget)
min(movies$budget)
movies[movies$budget<>"NA",c("budget")]
movies[movies$budget!="NA",c("budget")]
movies[movies$budget!="<NA>",c("budget")]
A=is.na(movies$budget)
A
movies[A]
A
A
movies$budget(is.na(movies$budget)==FALSE)
movies[is.na(movies$budget)==FALSE,c("budget")]
doh + geom_bar(width = 0.9, position = "fill") + coord_polar(theta = "y")
doh + geom_bar(width = 0.9, position = "fill")
doh + geom_bar(width = 0.9)
doh + geom_bar(width = 0.9)+coord_polar(theta = "y")
doh + geom_bar(width = 0.9,position=fill)+coord_polar(theta = "y")
doh + geom_bar(width = 0.9,position="fill")+coord_polar(theta = "y")
ggplot(diamonds, aes(log10(carat), log10(price))) + geom_point()
ggplot(diamonds, aes(carat, price)) + geom_point() + scale_x_log10() + scale_y_log10(
)
ggplot(diamonds, aes(log10(carat), log10(price))) + geom_point()
ggplot(diamonds, aes(carat, price)) + geom_point() + coord_trans(x = "log10", y = "log10")
ggplot(diamonds, aes(log10(carat), log10(price))) + geom_point()
ggplot(diamonds, aes(carat, price)) + geom_point() + scale_x_log10() + scale_y_log10()
ggplot(diamonds, aes(carat, price)) + geom_point() + coord_trans(x = "log10", y = "log10")
ggplot(diamonds, aes(carat, price)) + geom_point() + scale_x_log10() + scale_y_log10()
ggplot(diamonds, aes(carat, price)) + geom_point() + scale_x_log10() + scale_y_log10()
ggplot(diamonds, aes(carat, price)) + geom_point() + coord_trans(x = "log10", y = "log10")
d <- subset(diamonds, carat > 0.5)
d
ggplot(d, aes(carat, price)) + geom_point() + geom_smooth(method = "lm"
)
))+scale_x_log10() + scale_y_log10()
ggplot(d, aes(carat, price)) + geom_point() + geom_smooth(method = "lm")+scale_x_log10() + scale_y_log10()
table(cut_interval(1:100, 10))
table(cut_interval(1:100, 11)
)
table(cut_number(runif(1000), 10))
table(cut_width(runif(1000), 0.1))
data(economics)
head(economic,1)
head(economics,1)
head(economics_long,1)
data(economics_long)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
p
p + expand_limits(x = 0)
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
p + expand_limits(x = 0)
p + expand_limits(y = c(1, 9))
p + expand_limits(x = 0, y = 0)
ggplot(mtcars, aes(mpg, wt)) + geom_point(aes(colour = cyl)) + expand_limits(colour = seq(2, 10, by = 2))
ggplot(mtcars, aes(mpg, wt)) + geom_point(aes(colour = factor(cyl))) + expand_limits(colour = factor(seq(2, 10, by = 2)))
p<- ggplot(mtcars, aes(mpg, wt)) + geom_point()
p
p + facet_grid(. ~ cyl)
p + facet_grid(cyl ~ .)
p + facet_grid(vs ~ am)
p + facet_grid(vs ~ am, margins=TRUE)
p + facet_grid(vs ~ am)
p + facet_grid(vs ~ am, margins=TRUE)
p + facet_grid(vs ~ am)
p + facet_grid(vs ~ am, margins=TRUE)
set.seed(6809) diamonds <- diamonds[sample(nrow(diamonds), 1000), ]
set.seed(6809)
diamonds <- diamonds[sample(nrow(diamonds), 1000), ]
diamonds
class(diamond$cut)
class(diamonds$cut)
factor(diamonds$cut)
p <- ggplot(diamonds, aes(carat, ..density..)) + geom_histogram(binwidth = 1) p + facet_grid(. ~ cut)
p <- ggplot(diamonds, aes(carat, ..density..)) + geom_histogram(binwidth = 1)
p + facet_grid(. ~ cut)
diamonds$cut <- factor(diamonds$cut, levels = c("Ideal", "Very Good", "Fair", "Good", "Premium"))
p + facet_grid(. ~ cut)
p <- ggplot(diamonds, aes(carat, ..density..)) + geom_histogram(binwidth = 1)
p + facet_grid(. ~ cut
)
source('E:/Anoop/Books/Data Science/RPackages/ggplot2/GGPlot2Practise.R')
supressPackagesStartupMessages(library(googleVis))
supressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
supressPackageStartupMessages(library(googleVis))
suppressPackageStartupMessages(library(googleVis))
M<-gvisMotionChart(Fruits,"Fruit","Year",options=list(width=600,height=400))
print(M,"chart")
print(M,"chart")
M<-gvisMotionChart(Fruits,"Fruit","Year",options=list(width=600,height=400))
M
print(M,"chart")
gvisMotionChart(Fruits,"Fruit","Year",options=list(width=600,height=400))
suppressPackageStartupMessages(library(googleVis))
plot(M)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
v
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
source('E:/Anoop/Books/Data Science/CourseTutorials/Data-Science_jhonHopkins/Developing Data Products/Week1/ui.R')
library("shiny", lib.loc="~/R/win-library/3.2")
source('E:/Anoop/Books/Data Science/CourseTutorials/Data-Science_jhonHopkins/Developing Data Products/Week1/ui.R')
library("shinyapps", lib.loc="~/R/win-library/3.2")
source('E:/Anoop/Books/Data Science/CourseTutorials/Data-Science_jhonHopkins/Developing Data Products/Week1/ui.R')
library("digest", lib.loc="~/R/win-library/3.2")
library("devtools", lib.loc="~/R/win-library/3.2")
library("shiny", lib.loc="~/R/win-library/3.2")
source('E:/Anoop/Books/Data Science/CourseTutorials/Data-Science_jhonHopkins/Developing Data Products/Week1/ui.R')
source('E:/Anoop/Books/Data Science/CourseTutorials/Data-Science_jhonHopkins/Developing Data Products/Week1/Practise_Developing_Products.R')
setwd("E:\\Anoop\\Books\\Data Science\\CourseTutorials\\Data-Science_jhonHopkins\\Developing Data Products\\assignment")
getwd()
setwd("E:\\Anoop\\Books\\Data Science\\CourseTutorials\\Data-Science_jhonHopkins\\Developing Data Products\\assignment")
runApp()
setwd()
getwd()
setwd("E:\\Anoop\\Books\\Data Science\\CourseTutorials\\Data-Science_jhonHopkins\\Developing Data Products\\assignment\\Developing_Data_Products_assignment")
getwd()
RunApp()
library("shiny", lib.loc="~/R/win-library/3.2")
install.packages("Rcpp")
library("Rcpp", lib.loc="~/R/win-library/3.2")
library("shiny", lib.loc="~/R/win-library/3.2")
library("shinyapps", lib.loc="~/R/win-library/3.2")
getwd()
RunApp()
runApp()
runApp()
runApp()
library("devtools", lib.loc="~/R/win-library/3.2")
setwd()
getwd()
deployApp()
